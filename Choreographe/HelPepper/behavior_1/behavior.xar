<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="SocketAndroid" id="1" localization="8" tooltip="" x="223" y="137">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[
from SocketServer import ThreadingTCPServer,BaseRequestHandler
import json
import base64
import threading
import socket
import sys


myTCPServer = None
packageManager =  ALProxy("PackageManager")
managerProxy = ALProxy("ALBehaviorManager")

KHeaderStr = "$$qishanshi$$"
kEndStr = "\r\n"


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        reload(sys)
        sys.setdefaultencoding('utf-8')
        self.memory = ALProxy("ALMemory")
    def onLoad(self):
        pass

    def onUnload(self):
        stopTCPServer()


    def onInput_onStart(self):
        global myTCPServer
        self.getParentTimeline().pause()

        port = getTCPPort(1025)
        self.memory.insertData("SUPERPEPPER_TCPPORT",port)
        self.logger.info("TCP Server Port:%d",port)

        myTCPServer.serve_forever()

    def onInput_onStop(self):
        self.onUnload()

class MyTCPHandler(BaseRequestHandler):
    def handle(self):
        while 1:
            self.data = self.request.recv(1024).strip()

            recvDic = {}
            try:
                recvDic = json_loads_byteified(self.data)
            except Exception as e:
                break
            path = recvDic["Imprimir"]
            set.logger.error(path)
            if path == "TCP--DisConnect":
                break
            else:
                self.ActionWithDic(recvDic)
    def ActionWithDic(self, dic):
        path = dic["path"]
        if path == "packageIcon":
            uuid = dic["uuid"]
            icon = packageManager.packageIcon(uuid)
            if len(icon) > 0:

                baseDic = {"ContentType":"Image","ContentLength":str(len(icon))}
                jsonStr = json.dumps(baseDic,separators=(',',':'))
                header = KHeaderStr + jsonStr + kEndStr
                self.request.sendall(header)
                self.request.sendall(icon)
            else:
                baseDic = {"ContentLength":"0"}
                jsonStr = json.dumps(baseDic,separators=(',',':'))
                header = KHeaderStr + jsonStr + kEndStr
                self.request.sendall(header)
        else:
            pass



class TcpServer(ThreadingTCPServer):
    allow_reuse_address = True
    def serve_forever(self):
        self.stopped = False
        while not self.stopped:
            self.handle_request()
        self.server_close()
    def force_stop(self):
        self.stopped = True
        self.sendQUIT()
    def sendQUIT(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.connect(self.server_address)
            sock.sendall("QUIT")
        finally:
            sock.close()

#######################################################################
def getTCPPort(port):
    global myTCPServer
    currentPort = port
    while True:
        try:
            myTCPServer = TcpServer(('', currentPort),MyTCPHandler)
            break
        except Exception as e:
            currentPort += 1
    return currentPort

def stopTCPServer():
    global myTCPServer
    try:
        myTCPServer.force_stop()
    except Exception as e:
        pass
########################################################
def json_loads_byteified(json_text):
    return _byteify(
        json.loads(json_text, object_hook=_byteify),
        ignore_dicts=True
    )

def _byteify(data, ignore_dicts = False):
    if isinstance(data, unicode):
        return data.encode('utf-8')
    if isinstance(data, list):
        return [ _byteify(item, ignore_dicts=True) for item in data ]
    if isinstance(data, dict) and not ignore_dicts:
        return {
            _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)
            for key, value in data.iteritems()
        }
    return data]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Parameter name="Puerto" inherits_from_parent="0" content_type="1" value="1025" default_value="1025" min="1025" max="8079" tooltip="" id="5" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
